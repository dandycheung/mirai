/*
 * Copyright 2019-2020 Mamoe Technologies and contributors.
 *
 *  此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 *  Use of this source code is governed by the GNU AGPLv3 license that can be found through the following link.
 *
 *  https://github.com/mamoe/mirai/blob/master/LICENSE
 */

package net.mamoe.mirai.internal

import kotlinx.serialization.encodeToHexString
import net.mamoe.mirai.internal.network.protocol.data.jce.RequestDataVersion2
import net.mamoe.mirai.internal.network.protocol.data.jce.RequestPacket
import net.mamoe.mirai.internal.network.protocol.data.jce.SvcRspGetDevLoginInfo
import net.mamoe.mirai.internal.network.protocol.data.proto.MsgSvc
import net.mamoe.mirai.internal.network.protocol.data.proto.SubMsgType0x7
import net.mamoe.mirai.internal.utils._miraiContentToString
import net.mamoe.mirai.internal.utils.io.serialization.loadAs
import net.mamoe.mirai.internal.utils.io.serialization.readJceStruct
import net.mamoe.mirai.internal.utils.io.serialization.tars.internal.TarsDecoder
import net.mamoe.mirai.internal.utils.soutv
import net.mamoe.mirai.utils.*

/*
00 00 00 04 27 61 B7 9E 3D EA 0F AE 8F 3A DD 33 9B 51 91 95 8B 43 65 95 F8 13 55 DC F7 12 4C D0 9A E6 0B 25 1D 9E CB 07 06 6C 9B 8F 27 66 8A 77 C5 07 17 47 22 2B D2 91 C2 00 00 00 14 53 74 61 74 53 76 63 2E 72 65 67 69 73 74 65 72 00 00 00 08 0C 23 41 DC 00 00 00 13 35 34 38 38 30 38 31 38 35 31 32 35 34 31 30 00 00 00 04 00 22 7C 34 35 34 30 30 31 32 32 38 34 33 37 35 39 30 7C 41 38 2E 32 2E 37 2E 32 37 66 36 65 61 39 36 00 00 00 04 00 00 00 DA 10 03 2C 3C 4C 56 0B 50 75 73 68 53 65 72 76 69 63 65 66 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 7D 00 01 00 AA 08 00 01 06 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 1D 00 01 00 92 0A 03 00 00 00 00 B6 EB 64 59 10 07 2C 36 00 40 0B 5C 6C 7C 8C 9C AC B0 1D C0 01 D6 00 EC FD 10 00 00 10 CB AF 8D F2 DB 25 EE D4 DC 5A 82 33 55 47 02 21 F1 11 08 04 FC 12 F6 13 05 6D 69 72 61 69 F6 14 05 6D 69 72 61 69 F6 15 02 31 30 F0 16 01 FC 17 FC 18 FC 1A FC 1B FC 1D F6 1E 04 4D 49 55 49 F6 1F 14 3F 4F 4E 45 50 4C 55 53 20 41 35 30 30 30 5F 32 33 5F 31 37 FD 21 00 00 0F 0A 08 08 2E 10 C5 BA FB FF 05 0A 03 08 9B 02 FC 22 FC 24 0B 8C 98 0C A8 0C 42 CB 41 E7 62 3D B6 DB D3 AF D2 B2 80 16 10 4D 6B D9 21 0D 49 8D 51 A0 62 2C C1 30 25 31 72 26 2D 96 B1 F8 87 17 C5 16 97 36 65 9C 05 9B DE E0 19 C5 EA 5F 6D 8C 9D 27 DA D6 30 C7 01 99 C2 98 E3 23 59 1E E5 49 D5 1E 4F 7D 25 11 7B AF A0 64 00 83 9C BA 0A B8 71 2F 50 0F 2A 39 15 C3 98 4B 27 13 9F 2C 4B C9 A7 8F 93 47 27 FE 48 83 49 E5 C3 EB 11 95 A6 5D 6E B3 62 1A A0 32 91 30 24 00 56 ED C5 0A B4 F4 E1 B8 8B 7F 39 3E 47 20 80 56 15 F2 BD B8 A9 89 34 25 73 3D 4D 4B FF 26 FE 8D 6C DE FF DF 01 E5 D4 B0 28 EF F7 6C 31 18 F6 16 9E 49 AE 9D 47 4F FA 2D CD 39 09 46 CD 64 14 30 2C 48 1B C4 75 3B 3D A4 8F 8F 30 F0 7D CD 99 54 42 BF 32 DD 3E DC DF B2 45 00 64 24 CC 40 06 7C DA 5B 05 0D 8D 75 1A 5C C7 93 82 A5 B6 CF C1 0A E3 36 20 F7 8B 62 3C EB 6E 69 E7 86 DA 42 B2 FA 1B 2D F0 23 05 9B 08 CA 7A 38 F2 80 17 4D 13 7B 0A A6 1C E4 CF E7 2C 67 86 8A 82 40 22 81 AC 35 25 FA 19 CB 3D 21 E3 AB 2C CB D5 65 20 70 C3 08 A7 0D 73 72 17 F5 15 53 ED D0 66 61 7E 6A F9 99 3D 31 18 35 D7 41 4B FD 6C 18 76 36 8D 21 29 EF A6 A2 48 63 8B 27 86 F6 5E 00 6F 3F 41 B4 B8 58 C3 3A 38 8A B1 C0 F1 CD FB C4 08 30 A3 6C AD 25 A0 D4 C9 34 C5 DD E4 BA 17 F2 E2 02 5A C5 E8 6C B4 8F 21 3E 13 5C 31 8B FE F3 17 0F 93 9A A8 BD 0E 80 F1 12 E2 82 80 2F B2 8A 2E 03 E4 AF 89 52 94 71 55 E1 EB D4 97 0F 07 E2 0F F9 0C E8 91 F6 83 D4 39 F6 8F 5B BF 04 5D FF C1 2A B1 27 26 A1 A7 88 2D 5C F8 7A 3A E9 94 1D 87 1F 90 8C 8F 2D 1C CE 8C C5 C1 52 26 4E 32 E1 E5 EF 0D 18 5A 34 26 90 37 69 6A B6 F2 F2 64 49 60 EA DE 18 F1 81 A1 5B BE 89 98 83 D5 6D B7 0E B5 9A A9 56 BE E4 F9 76 24 A9 6E A1 C1 F2 D0 AA 39 E0 9C F4 C6 86 20 CA 09 BA 15 0D 2F A8 9A 30 AE E6 9B CD 95 C0 1E 47 55 6D 59 F2 49 02 ED 14 62 16 EC 76 19 6A A3 39 53 DB 4E B9 C1 FC 11 8A 7F 68 0F B5 CC 6C 56 53 F6 E4 98 12 0A 0B A3 56 6E E2 F6 B1 92 CD 2F A0 A6 39 CB 34 A6 88 B2 9F 03 50 2F A6 1C EF 22 5D 01 E8 78 44 71 64 86 F8 4C 38 01 C9 71 5D CB 89 B2 08 4E 49 0C 9D A7 2F 1E BF F8 F8 8E 3C F3 11 A1 5B BA CF 65 A0 19 11 AE E2 90 8E 3E 69 98 13 9E 95 43 5E 22 5D 95 4C 19 81 3D 25 B1 FA 30 DB 4D 87 0E 6B 16 A5 FC 0D E7 B0 F4 16 AE AC B2 A5 53 65 9B 24 34 D0 86 A7 FA 0C 67 DD 8D A3 04 EE 76 70 6B A3 2E AA 4C 95 18 31 80 0E 03 37 20 98 E3 B7 51 80 2C 1F A3 B2 57 5B B5 8F B9 0B BC 4F F4 79 52 63 8F 56 C5 21 58 90 9E 75 A2 36 91 8D 4D C7 9C F3 83 D8 56 F3 F1 ED 56 08 E7 3A 72 F7 FB C9 A3 E4 43 7A 9E 4A E6 8F 30 79 F7 9B 76 69 9B CF C1 31 10 2D F1 3F 9A 0B F5 0E 67 2A 03 0A 36 F0 2C BA 56 41 E7 D8 A5 D3 79 1C C6 33 FA 5A 02 A6 B8 14 6A EF 3E DE 37 94 4C 3D 87 27 6B 49 C9 21 08 77 37 3A FA 67 3B DD A8 1B 44 0D 98 59 C5 23 75 82 2B 04 58 45 C5 7F E7 D4 56 25 11 A6 67 23 9B F7 A9 D4 C6 65 EA 43 29 FE 1D C4 23 8E D2 CC 2C 10 C0 83 CC 30 4B AB 6D 9E 6E 81 CC 8C AA 3A 67 47 33 AA EA F8 19 AA BC 23 DA 01 09 12 BB 88 1B E0 A3 4C BB 80 97 70 FB 39 3E 9B 36 59 58 F6 1C BD 82 23 59 95 7F D0 6D 90 15 71 99 7B 3B ED 99 94 C2 A7 D2 79 07 41 6D 1E C5 FB 22 6B 77 F6 E7 5B 2E B5 2E 58 F4 CE 74 13 46 94 46 82 9B D4 3C 68 8E 4D 17 91 E4 2A 18 03 B7 63 86 79 A8 1B BF 38 B8 0E C0 6A C9 66 82 15 A4 84 42 AC C1 A3 1D 18 97 72 D4 93 08 C3 4C A4 51 48 54 40 13 76 06 66 9B 20 8B C8 4E B5 C2 75 82 4E 00 DF D1 8B FF 66 87 FA C6 E8 99 D7 CC 1F 47 E7 D3 91 E8 5B FE FE 2C E2 2B B4 37 40 FE C0 15 AB 0C 31 2A 56 70 BB 4F 37 03 6C 87 25 84 4D 77 E2 C9 D9 94 B5 B5 A0 35 49 07 A6 6E 91 DE FC 42 E6 71 42 EF AE F4 2B FC 96 98 24 4A 3C 23 20 07 DB 60 B0 47 CA E5 F3 5B D7 B0 80 F1 ED F7 77 AA 73 4E 37 A7 CF 5E B4 4E 53 9D EB 84 59 7A 34 61 AF 02 18 12 36 1B FF 53 4A EE FB 9A D0 A1 AA B3 70 2E DD 4E A4 26 EA 52 9F 75 0B 95 B9 87 D8 8D 5C 4B 35 36 97 1A 73 88 9B 36 1A 11 8A 64 71 E1 4A E7 19 22 77 9C 0C A0 98 95 3F 59 A7 85 4B 9C 5D 2F 8E 11 8B F7 7D 0F 73 67 F9 2F 3C 3E 21 5B 77 A5 31 F5 6E B6 E1 40 FB B5 39 8D B2 41 2B 8D AA 18 96 33 FC 00 34 FB 8C 6E B6 B8 99 BC 89 B2 F0 3A E0 7F 5D 01 B4 DA FC 15 E2 F7 E0 34 20 50 32 33 26 52 31 F3 1F 61 A7 45 36 A4 67 A9 CD 0A FB 95 14 00 EA 9D 62 4B FB 2F D4 9F 79 3A 82 2B 8B 7D D4 44 F7 4A F9 18 A0 2F B5 F5 2C 14 F4 12 68 28 75 91 AE A1 FE 92 B3 C2 91 43 13 68 C5 B8 C7 67 CD EB 98 49 6C E5 CC 67 5A B6 6D 28 5D A0 F4 D4 10 CB 8D 44 84 5C 84 85 96 09 50 8A B9 22 65 5D 3F E3 D2 BA 9E 73 50 88 8B 55 D0 2A 35 E7 3D 5E 96 3F B9 FB E2 BB 93 31 3F 97 13 58 9E 16 3C 81 31 02 8A 88 35 11 E4 88 DE 2D B9 95 87 C1 DC C1 96 FB E7 0D 1D 9C 04 E8 1D 8C F7 7B 5D 32 03 E7 D1 59 75 53 7E 54 80 E0 A3 7C A2 C7 CA 11 22 7E 59 BA 71 C4 36 BB 8D 98 E9 82 C8 5B 6C 83 52 93 ED 08 9D 18 3B 7A C7 45 3A 10 13 58 49 3A AB A7 5C E4 DB 88 5D 82 17 B5 D2 E5 B5 58 86 FC 8E 89 CB 49 98 C0 71 17 55 08 B2 91 E5 B0 CA E0 A4 D7 D8 C9 F4 E8 F4 01 2F 09 7A 61 E4 AB D5 8F 60 6B A2 8F 30 38 15 29 F6 22 8F EB 58 4A 94 17 80 79 C7 73 E3 4F 64 91 78 25 38 BD 13 17 7A D3 77 F6 B5 5B 75 B0 84 2C 85 13 4C BA 34 55 B4 81 A3 D5 4D 17 55 FF 8F 84 88 17 10 89 02 B0 38 66 E4 01 76 5B 1E E2 DE E4 FC CF 61 16 FE 4F 03 29 99 59 23 36 F6 88 81 07 85 FB 3D 23 79 68 D7 EC 08 97 2D D7 7D C7 69 C9 D5 6B 61 08 97 F8 90 A0 3D A4 9D 9C 3D 24 8D A8 12 BD E2 47 84 6C 07 B9 43 06 CD 19 90 6D 16 B7 6A FE DE 51 FE B4 79 18 33 B6 7F E1 93 6F 85 D8 5D C4 6A 73 4A 91 D0 77 BD 4F D7 FB 0F B7 E1 31 8E 13 7D B8 66 17 0B E3 60 C1 53 66 12 5F 5B DF 45 77 40 E4 1E 13 E5 8C E5 8F 20 F1 85 AE 20 10 C4 BE 4D 66 8A 42 7F 75 B2 AB 01 2E 97 21
 */
@Suppress("UNREACHABLE_CODE")
fun main() {
    "08 01 12 00 18 DD F1 92 B7 07 20 D5 9E BE 89 06 28 EC A8 85 B0 0A 3A 38 77 5D 21 FA 7D 82 9A D4 6B B6 62 F2 4B D3 09 A6 A4 5D 42 D9 5C FE 7F 57 1F 3B F8 5A 0D 91 86 88 1F 24 B1 1E 33 30 99 24 4F 78 0E FA 1A 74 C7 7A 28 13 01 60 45 CD D5 49\n\n"
        .trim().hexToBytes().run {
            loadAs(MsgSvc.PbGetRoamMsgResp.serializer())
        }.soutv()

//    "0A 08 12 06 E7 B2 89 E8 89 B2 0A 04 0A 02 24 03 10 00".hexToBytes().loadAs(Oidb0x8fc.CommCardNameBuf.serializer()).soutv()

    return

    kotlinx.serialization.protobuf.ProtoBuf.encodeToHexString(1689332925L.toByteArray()).soutv("yellow")
    kotlinx.serialization.protobuf.ProtoBuf.encodeToHexString(1234567890L.toByteArray()).soutv("yellow")
    return

    return

    val x = """
10 03 2C 3C 4C 56 0B 50 75 73 68 53 65 72 76 69 63 65 66 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 7D 00 01 00 AA 08 00 01 06 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 1D 00 01 00 92 0A 03 00 00 00 00 B6 EB 64 59 10 07 2C 36 00 40 0B 5C 6C 7C 8C 9C AC B0 1D C0 01 D6 00 EC FD 10 00 00 10 CB AF 8D F2 DB 25 EE D4 DC 5A 82 33 55 47 02 21 F1 11 08 04 FC 12 F6 13 05 6D 69 72 61 69 F6 14 05 6D 69 72 61 69 F6 15 02 31 30 F0 16 01 FC 17 FC 18 FC 1A FC 1B FC 1D F6 1E 04 4D 49 55 49 F6 1F 14 3F 4F 4E 45 50 4C 55 53 20 41 35 30 30 30 5F 32 33 5F 31 37 FD 21 00 00 0F 0A 08 08 2E 10 C5 BA FB FF 05 0A 03 08 9B 02 FC 22 FC 24 0B 8C 98 0C A8 0C 42 CB 41 E7 62 3D B6 DB D3 AF D2 B2 80 16 10 4D 6B D9 21 0D 49 8D 51 A0 62 2C C1 30 25 31 72 26 2D 96 B1 F8 87 17 C5 16 97 36 65 9C 05 9B DE E0 19 C5 EA 5F 6D 8C 9D 27 DA D6 30 C7 01 99 C2 98 E3 23 59 1E E5 49 D5 1E 4F 7D 25 11 7B AF A0 64 00 83 9C BA 0A B8 71 2F 50 0F 2A 39 15 C3 98 4B 27 13 9F 2C 4B C9 A7 8F 93 47 27 FE 48 83 49 E5 C3 EB 11 95 A6 5D 6E B3 62 1A A0 32 91 30 24 00 56 ED C5 0A B4 F4 E1 B8 8B 7F 39 3E 47 20 80 56 15 F2 BD B8 A9 89 34 25 73 3D 4D 4B FF 26 FE 8D 6C DE FF DF 01 E5 D4 B0 28 EF F7 6C 31 18 F6 16 9E 49 AE 9D 47 4F FA 2D CD 39 09 46 CD 64 14 30 2C 48 1B C4 75 3B 3D A4 8F 8F 30 F0 7D CD 99 54 42 BF 32 DD 3E DC DF B2 45 00 64 24 CC 40 06 7C DA 5B 05 0D 8D 75 1A 5C C7 93 82 A5 B6 CF C1 0A E3 36 20 F7 8B 62 3C EB 6E 69 E7 86 DA 42 B2 FA 1B 2D F0 23 05 9B 08 CA 7A 38 F2 80 17 4D 13 7B 0A A6 1C E4 CF E7 2C 67 86 8A 82 40 22 81 AC 35 25 FA 19 CB 3D 21 E3 AB 2C CB D5 65 20 70 C3 08 A7 0D 73 72 17 F5 15 53 ED D0 66 61 7E 6A F9 99 3D 31 18 35 D7 41 4B FD 6C 18 76 36 8D 21 29 EF A6 A2 48 63 8B 27 86 F6 5E 00 6F 3F 41 B4 B8 58 C3 3A 38 8A B1 C0 F1 CD FB C4 08 30 A3 6C AD 25 A0 D4 C9 34 C5 DD E4 BA 17 F2 E2 02 5A C5 E8 6C B4 8F 21 3E 13 5C 31 8B FE F3 17 0F 93 9A A8 BD 0E 80 F1 12 E2 82 80 2F B2 8A 2E 03 E4 AF 89 52 94 71 55 E1 EB D4 97 0F 07 E2 0F F9 0C E8 91 F6 83 D4 39 F6 8F 5B BF 04 5D FF C1 2A B1 27 26 A1 A7 88 2D 5C F8 7A 3A E9 94 1D 87 1F 90 8C 8F 2D 1C CE 8C C5 C1 52 26 4E 32 E1 E5 EF 0D 18 5A 34 26 90 37 69 6A B6 F2 F2 64 49 60 EA DE 18 F1 81 A1 5B BE 89 98 83 D5 6D B7 0E B5 9A A9 56 BE E4 F9 76 24 A9 6E A1 C1 F2 D0 AA 39 E0 9C F4 C6 86 20 CA 09 BA 15 0D 2F A8 9A 30 AE E6 9B CD 95 C0 1E 47 55 6D 59 F2 49 02 ED 14 62 16 EC 76 19 6A A3 39 53 DB 4E B9 C1 FC 11 8A 7F 68 0F B5 CC 6C 56 53 F6 E4 98 12 0A 0B A3 56 6E E2 F6 B1 92 CD 2F A0 A6 39 CB 34 A6 88 B2 9F 03 50 2F A6 1C EF 22 5D 01 E8 78 44 71 64 86 F8 4C 38 01 C9 71 5D CB 89 B2 08 4E 49 0C 9D A7 2F 1E BF F8 F8 8E 3C F3 11 A1 5B BA CF 65 A0 19 11 AE E2 90 8E 3E 69 98 13 9E 95 43 5E 22 5D 95 4C 19 81 3D 25 B1 FA 30 DB 4D 87 0E 6B 16 A5 FC 0D E7 B0 F4 16 AE AC B2 A5 53 65 9B 24 34 D0 86 A7 FA 0C 67 DD 8D A3 04 EE 76 70 6B A3 2E AA 4C 95 18 31 80 0E 03 37 20 98 E3 B7 51 80 2C 1F A3 B2 57 5B B5 8F B9 0B BC 4F F4 79 52 63 8F 56 C5 21 58 90 9E 75 A2 36 91 8D 4D C7 9C F3 83 D8 56 F3 F1 ED 56 08 E7 3A 72 F7 FB C9 A3 E4 43 7A 9E 4A E6 8F 30 79 F7 9B 76 69 9B CF C1 31 10 2D F1 3F 9A 0B F5 0E 67 2A 03 0A 36 F0 2C BA 56 41 E7 D8 A5 D3 79 1C C6 33 FA 5A 02 A6 B8 14 6A EF 3E DE 37 94 4C 3D 87 27 6B 49 C9 21 08 77 37 3A FA 67 3B DD A8 1B 44 0D 98 59 C5 23 75 82 2B 04 58 45 C5 7F E7 D4 56 25 11 A6 67 23 9B F7 A9 D4 C6 65 EA 43 29 FE 1D C4 23 8E D2 CC 2C 10 C0 83 CC 30 4B AB 6D 9E 6E 81 CC 8C AA 3A 67 47 33 AA EA F8 19 AA BC 23 DA 01 09 12 BB 88 1B E0 A3 4C BB 80 97 70 FB 39 3E 9B 36 59 58 F6 1C BD 82 23 59 95 7F D0 6D 90 15 71 99 7B 3B ED 99 94 C2 A7 D2 79 07 41 6D 1E C5 FB 22 6B 77 F6 E7 5B 2E B5 2E 58 F4 CE 74 13 46 94 46 82 9B D4 3C 68 8E 4D 17 91 E4 2A 18 03 B7 63 86 79 A8 1B BF 38 B8 0E C0 6A C9 66 82 15 A4 84 42 AC C1 A3 1D 18 97 72 D4 93 08 C3 4C A4 51 48 54 40 13 76 06 66 9B 20 8B C8 4E B5 C2 75 82 4E 00 DF D1 8B FF 66 87 FA C6 E8 99 D7 CC 1F 47 E7 D3 91 E8 5B FE FE 2C E2 2B B4 37 40 FE C0 15 AB 0C 31 2A 56 70 BB 4F 37 03 6C 87 25 84 4D 77 E2 C9 D9 94 B5 B5 A0 35 49 07 A6 6E 91 DE FC 42 E6 71 42 EF AE F4 2B FC 96 98 24 4A 3C 23 20 07 DB 60 B0 47 CA E5 F3 5B D7 B0 80 F1 ED F7 77 AA 73 4E 37 A7 CF 5E B4 4E 53 9D EB 84 59 7A 34 61 AF 02 18 12 36 1B FF 53 4A EE FB 9A D0 A1 AA B3 70 2E DD 4E A4 26 EA 52 9F 75 0B 95 B9 87 D8 8D 5C 4B 35 36 97 1A 73 88 9B 36 1A 11 8A 64 71 E1 4A E7 19 22 77 9C 0C A0 98 95 3F 59 A7 85 4B 9C 5D 2F 8E 11 8B F7 7D 0F 73 67 F9 2F 3C 3E 21 5B 77 A5 31 F5 6E B6 E1 40 FB B5 39 8D B2 41 2B 8D AA 18 96 33 FC 00 34 FB 8C 6E B6 B8 99 BC 89 B2 F0 3A E0 7F 5D 01 B4 DA FC 15 E2 F7 E0 34 20 50 32 33 26 52 31 F3 1F 61 A7 45 36 A4 67 A9 CD 0A FB 95 14 00 EA 9D 62 4B FB 2F D4 9F 79 3A 82 2B 8B 7D D4 44 F7 4A F9 18 A0 2F B5 F5 2C 14 F4 12 68 28 75 91 AE A1 FE 92 B3 C2 91 43 13 68 C5 B8 C7 67 CD EB 98 49 6C E5 CC 67 5A B6 6D 28 5D A0 F4 D4 10 CB 8D 44 84 5C 84 85 96 09 50 8A B9 22 65 5D 3F E3 D2 BA 9E 73 50 88 8B 55 D0 2A 35 E7 3D 5E 96 3F B9 FB E2 BB 93 31 3F 97 13 58 9E 16 3C 81 31 02 8A 88 35 11 E4 88 DE 2D B9 95 87 C1 DC C1 96 FB E7 0D 1D 9C 04 E8 1D 8C F7 7B 5D 32 03 E7 D1 59 75 53 7E 54 80 E0 A3 7C A2 C7 CA 11 22 7E 59 BA 71 C4 36 BB 8D 98 E9 82 C8 5B 6C 83 52 93 ED 08 9D 18 3B 7A C7 45 3A 10 13 58 49 3A AB A7 5C E4 DB 88 5D 82 17 B5 D2 E5 B5 58 86 FC 8E 89 CB 49 98 C0 71 17 55 08 B2 91 E5 B0 CA E0 A4 D7 D8 C9 F4 E8 F4 01 2F 09 7A 61 E4 AB D5 8F 60 6B A2 8F 30 38 15 29 F6 22 8F EB 58 4A 94 17 80 79 C7 73 E3 4F 64 91 78 25 38 BD 13 17 7A D3 77 F6 B5 5B 75 B0 84 2C 85 13 4C BA 34 55 B4 81 A3 D5 4D 17 55 FF 8F 84 88 17 10 89 02 B0 38 66 E4 01 76 5B 1E E2 DE E4 FC CF 61 16 FE 4F 03 29 99 59 23 36 F6 88 81 07 85 FB 3D 23 79 68 D7 EC 08 97 2D D7 7D C7 69 C9 D5 6B 61 08 97 F8 90 A0 3D A4 9D 9C 3D 24 8D A8 12 BD E2 47 84 6C 07 B9 43 06 CD 19 90 6D 16 B7 6A FE DE 51 FE B4 79 18 33 B6 7F E1 93 6F 85 D8 5D C4 6A 73 4A 91 D0 77 BD 4F D7 FB 0F B7 E1 31 8E 13 7D B8 66 17 0B E3 60 C1 53 66 12 5F 5B DF 45 77 40 E4 1E 13 E5 8C E5 8F 20 F1 85 AE 20 10 C4 BE 4D 66 8A 42 7F 75 B2 AB 01 2E 97 21
""".trim().hexToBytes()
    x.read {
        readJceStruct(RequestPacket.serializer())
        // readProtoBuf(MultiMsg.ReqBody.serializer())
    }.soutv()

    return
    x.read {
        // TarsDecoder.debuggingMode = true
        // readJceStruct(Skip.serializer())
        //readJceStruct(ConfigPushSvc.PushReq.PushReqResponse.ChangeServer.serializer())
        // "\n" + _readTLVMap().smartToString()
    }.soutv("mirai")


    ///  x.loadOidb(OidbCmd0xb77.ReqBody.serializer(), true).soutv()

    return

    val tlv = x.toReadPacket()._readTLVMap()
    tlv._miraiContentToString().soutv("s")
    return

    TarsDecoder.debuggingMode = true
    x.loadAs(RequestDataVersion2.serializer()).soutv("")

    return

    for (offset in 0..x.size) {
        runCatching {
            x.drop(offset).toByteArray().loadAs(SvcRspGetDevLoginInfo.serializer()).soutv("OK")
        }.fold(onSuccess = {
            println(offset)
            return
        }, onFailure = {})
    }

    return

    val hex = """
        08 04 12 1E 08 E9 07 10 B7 F7 8B 80 02 18 E9 07 20 00 28 DD F1 92 B7 07 30 DD F1 92 B7 07 48 02 50 03 32 1E 08 88 80 F8 92 CD 84 80 80 10 10 01 18 00 20 01 2A 0C 0A 0A 08 01 12 06 E5 95 8A E5 95 8A
    """.trimIndent().hexToBytes()

    val msg = hex.loadAs(SubMsgType0x7.MsgBody.serializer())

    msg.soutv("")
    println(msg)
}